// <auto-generated />
using System;
using DAL.App.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.App.EF.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20201117141446_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Availability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("From")
                        .HasColumnType("date");

                    b.Property<decimal>("PricePerNightForAdult")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("PricePerNightForChild")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<bool>("PricePerPerson")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("char(36)");

                    b.Property<int>("RoomsAvailable")
                        .HasColumnType("int");

                    b.Property<DateTime>("To")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Availabilities");
                });

            modelBuilder.Entity("Domain.Extra", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ReservationId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("ReservationId");

                    b.ToTable("Extras");
                });

            modelBuilder.Entity("Domain.Facility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Facilities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("25d3d13d-01c5-467f-922f-f9eb005fef8f"),
                            ChangedAt = new DateTime(2020, 11, 17, 16, 14, 45, 389, DateTimeKind.Local).AddTicks(4706),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 17, 16, 14, 45, 394, DateTimeKind.Local).AddTicks(7928),
                            CreatedBy = "migration",
                            Name = "Upper floors accessible by elevator"
                        },
                        new
                        {
                            Id = new Guid("24bea6a2-dd08-4146-87fe-2c54a4e60dec"),
                            ChangedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(936),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(953),
                            CreatedBy = "migration",
                            Name = "Linens"
                        },
                        new
                        {
                            Id = new Guid("7d240db5-6b3f-48e8-ba4c-f3a253d1eac2"),
                            ChangedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(1008),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(1010),
                            CreatedBy = "migration",
                            Name = "Wardrobe or closet"
                        },
                        new
                        {
                            Id = new Guid("f143dc83-ceb0-4bd8-81cb-ff1f451fb35f"),
                            ChangedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(1037),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(1039),
                            CreatedBy = "migration",
                            Name = "Minibar"
                        },
                        new
                        {
                            Id = new Guid("2944a569-258f-4800-8a6d-69128adbe73f"),
                            ChangedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(1063),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(1065),
                            CreatedBy = "migration",
                            Name = "Air conditioning"
                        },
                        new
                        {
                            Id = new Guid("bdc8f99e-00bb-49f6-bd8d-b9816f1939e8"),
                            ChangedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(1094),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(1097),
                            CreatedBy = "migration",
                            Name = "Safe"
                        },
                        new
                        {
                            Id = new Guid("5c329ea1-d397-46d4-8ea5-e1981f77de0c"),
                            ChangedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(1121),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(1123),
                            CreatedBy = "migration",
                            Name = "Ironing facilities"
                        },
                        new
                        {
                            Id = new Guid("b20eab81-6d69-4c2d-8ce4-d8c46999cfbe"),
                            ChangedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(1146),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(1148),
                            CreatedBy = "migration",
                            Name = "Iron"
                        },
                        new
                        {
                            Id = new Guid("b77aefb0-2f61-4af4-8fb3-2612f8268e37"),
                            ChangedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(1193),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(1196),
                            CreatedBy = "migration",
                            Name = "Heating"
                        },
                        new
                        {
                            Id = new Guid("7d521c86-2059-4bee-bfd5-da03f85628c5"),
                            ChangedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(1221),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(1223),
                            CreatedBy = "migration",
                            Name = "Coffee machine"
                        },
                        new
                        {
                            Id = new Guid("a6a77b5c-d9e7-4e1d-91d9-d9cfe6023e3b"),
                            ChangedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(1246),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(1248),
                            CreatedBy = "migration",
                            Name = "Electric kettle"
                        },
                        new
                        {
                            Id = new Guid("c2e2bb65-cbcb-4da7-a3d7-d3b1488b678c"),
                            ChangedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(1272),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(1274),
                            CreatedBy = "migration",
                            Name = "Sofa"
                        },
                        new
                        {
                            Id = new Guid("c74d127d-1c28-4dca-9dd6-3fb18c33544c"),
                            ChangedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(1297),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(1299),
                            CreatedBy = "migration",
                            Name = "Desk"
                        },
                        new
                        {
                            Id = new Guid("b229d581-77ac-494d-9cf3-3da4d66c5aea"),
                            ChangedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(1322),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(1325),
                            CreatedBy = "migration",
                            Name = "Satellite channels"
                        },
                        new
                        {
                            Id = new Guid("44befb59-568f-4d0a-8933-a3f30c3feeab"),
                            ChangedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(1348),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(1350),
                            CreatedBy = "migration",
                            Name = "Flat-screen TV"
                        },
                        new
                        {
                            Id = new Guid("da510e10-3842-431a-9ec4-b64c8513aa15"),
                            ChangedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(1373),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(1375),
                            CreatedBy = "migration",
                            Name = "Balcony"
                        },
                        new
                        {
                            Id = new Guid("c3634061-fd8a-4f70-a476-7c6838eaa1aa"),
                            ChangedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(1399),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(1401),
                            CreatedBy = "migration",
                            Name = "Outdoor furniture"
                        },
                        new
                        {
                            Id = new Guid("e31a6df9-ee3c-481f-b516-01e7174ae847"),
                            ChangedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(1426),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(1428),
                            CreatedBy = "migration",
                            Name = "Wake-up service"
                        },
                        new
                        {
                            Id = new Guid("2423e8af-f301-4fec-aa4b-729c0cceffa2"),
                            ChangedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(1452),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 17, 16, 14, 45, 395, DateTimeKind.Local).AddTicks(1454),
                            CreatedBy = "migration",
                            Name = "Free Wi-Fi"
                        });
                });

            modelBuilder.Entity("Domain.Identity.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0e93e56a-9907-48da-8b0b-33536b9e60a0"),
                            ConcurrencyStamp = "2566cf23-f574-4f68-b528-51112f1ff34a",
                            Name = "host",
                            NormalizedName = "Host"
                        },
                        new
                        {
                            Id = new Guid("878d34ac-4fe7-4f57-86a3-196eb31c5804"),
                            ConcurrencyStamp = "de5ca697-caf3-4a1d-9432-9f09ccfb93c5",
                            Name = "gust",
                            NormalizedName = "Guest"
                        });
                });

            modelBuilder.Entity("Domain.Identity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4d0fe7b4-999c-45b9-bc0a-ed71c4c47d66"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5a81be59-a57c-437a-a34a-3164a2ac1228",
                            Email = "user@user.com",
                            EmailConfirmed = true,
                            FirstName = "user",
                            LastName = "user",
                            LockoutEnabled = false,
                            LockoutEnd = new DateTimeOffset(new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999), new TimeSpan(0, 0, 0, 0, 0)),
                            NormalizedEmail = "USER@USER.COM",
                            NormalizedUserName = "USER@USER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEL+PkZzhbRBn04X7u9hI9egVJ3hMgCZ6Fnj2HTjEMzJ945xwTxP803qDQxgYaCCWjg==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user@user.com"
                        },
                        new
                        {
                            Id = new Guid("3ec1288a-c4d6-411a-91da-a60716fd327c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "98d87b77-6a1c-446c-a6dd-093cb204c1c3",
                            Email = "host@host.com",
                            EmailConfirmed = true,
                            FirstName = "host",
                            LastName = "host",
                            LockoutEnabled = false,
                            LockoutEnd = new DateTimeOffset(new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999), new TimeSpan(0, 0, 0, 0, 0)),
                            NormalizedEmail = "HOST@HOST.COM",
                            NormalizedUserName = "HOST@HOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFCEYWptJFOgIsSiAchTvzX/ewRiDcrloXprM3z0K7LCoG1rpBj6+Tb8pWrUnOgcKw==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "host@host.com"
                        });
                });

            modelBuilder.Entity("Domain.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ReservationId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Domain.Policy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int?>("CancellationBefore")
                        .HasColumnType("int");

                    b.Property<int?>("CancellationFee")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("PrepaymentBefore")
                        .HasColumnType("int");

                    b.Property<double>("PriceCoefficient")
                        .HasColumnType("double");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Policies");
                });

            modelBuilder.Entity("Domain.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("Domain.PropertyRules", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<bool?>("AllowParties")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowPets")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("CheckInAge")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("CheckInFrom")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("CheckInTo")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("CheckOutBefore")
                        .HasColumnType("time(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal?>("DamageDeposit")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<bool>("DamageDepositRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PaymentMethodsAccepted")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("PropertyRules");
                });

            modelBuilder.Entity("Domain.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Adults")
                        .HasColumnType("int");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ArrivalTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("date");

                    b.Property<int>("Children")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Message")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("char(36)");

                    b.Property<int>("ReservationNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Domain.ReservationExtras", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("ExtraId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ExtraId");

                    b.HasIndex("ReservationId");

                    b.ToTable("ReservationExtras");
                });

            modelBuilder.Entity("Domain.ReservationRooms", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BedType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("GuestFirstLastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("PolicyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId");

                    b.HasIndex("RoomId");

                    b.ToTable("ReservationRooms");
                });

            modelBuilder.Entity("Domain.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("ReservationId")
                        .IsUnique();

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Domain.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AdultsOccupancy")
                        .HasColumnType("int");

                    b.Property<bool>("AllowSmoking")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("BedTypes")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ChildOccupancy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Domain.RoomFacilities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("FacilityId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomFacilities");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("3ec1288a-c4d6-411a-91da-a60716fd327c"),
                            RoleId = new Guid("0e93e56a-9907-48da-8b0b-33536b9e60a0")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.Availability", b =>
                {
                    b.HasOne("Domain.Room", "Room")
                        .WithMany("RoomAvailabilities")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Extra", b =>
                {
                    b.HasOne("Domain.Property", null)
                        .WithMany("Extras")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Reservation", null)
                        .WithMany("Extras")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.Invoice", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Property", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.PropertyRules", b =>
                {
                    b.HasOne("Domain.Property", "Property")
                        .WithOne("PropertyRules")
                        .HasForeignKey("Domain.PropertyRules", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Reservation", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.ReservationExtras", b =>
                {
                    b.HasOne("Domain.Extra", "Extra")
                        .WithMany()
                        .HasForeignKey("ExtraId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.ReservationRooms", b =>
                {
                    b.HasOne("Domain.Reservation", "Reservation")
                        .WithMany("ReservationRooms")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Review", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Property", "Property")
                        .WithMany("Reviews")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Reservation", "Reservation")
                        .WithOne("Review")
                        .HasForeignKey("Domain.Review", "ReservationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Room", b =>
                {
                    b.HasOne("Domain.Property", "Property")
                        .WithMany("PropertyRooms")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.RoomFacilities", b =>
                {
                    b.HasOne("Domain.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Room", "Room")
                        .WithMany("RoomFacilities")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
