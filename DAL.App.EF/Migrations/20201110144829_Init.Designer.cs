// <auto-generated />
using System;
using DAL.App.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.App.EF.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20201110144829_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Availability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("From")
                        .HasColumnType("date");

                    b.Property<decimal>("PricePerNightForAdult")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("PricePerNightForChild")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<bool>("PricePerPerson")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("char(36)");

                    b.Property<int>("RoomsAvailable")
                        .HasColumnType("int");

                    b.Property<DateTime>("To")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Availabilities");
                });

            modelBuilder.Entity("Domain.AvailabilityPolicies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("AvailabilityId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("PolicyId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilityId");

                    b.HasIndex("PolicyId");

                    b.ToTable("AvailabilityPolicies");
                });

            modelBuilder.Entity("Domain.Extra", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("Extras");
                });

            modelBuilder.Entity("Domain.Facility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Facilities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d175bdc2-2569-4e16-a7a2-7e77567fbb2b"),
                            ChangedAt = new DateTime(2020, 11, 10, 16, 48, 28, 442, DateTimeKind.Local).AddTicks(4378),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 10, 16, 48, 28, 447, DateTimeKind.Local).AddTicks(9135),
                            CreatedBy = "migration",
                            Name = "Upper floors accessible by elevator"
                        },
                        new
                        {
                            Id = new Guid("8590fc1f-021c-48c8-82ec-f7b8ba260ac7"),
                            ChangedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(2565),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(2583),
                            CreatedBy = "migration",
                            Name = "Linens"
                        },
                        new
                        {
                            Id = new Guid("f13720d4-c808-4a41-b30e-3819e3986a86"),
                            ChangedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(2634),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(2637),
                            CreatedBy = "migration",
                            Name = "Wardrobe or closet"
                        },
                        new
                        {
                            Id = new Guid("defe95b3-1982-419e-a871-a6c116e504eb"),
                            ChangedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(2661),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(2664),
                            CreatedBy = "migration",
                            Name = "Minibar"
                        },
                        new
                        {
                            Id = new Guid("346141cf-7b75-4d02-bf82-20815ba971ab"),
                            ChangedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(2688),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(2690),
                            CreatedBy = "migration",
                            Name = "Air conditioning"
                        },
                        new
                        {
                            Id = new Guid("c92eab10-ebae-41e7-b25a-30459cd10743"),
                            ChangedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(2721),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(2724),
                            CreatedBy = "migration",
                            Name = "Safe"
                        },
                        new
                        {
                            Id = new Guid("1488f6ee-4b04-4c0a-afe9-1bf6c7009b49"),
                            ChangedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(2747),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(2749),
                            CreatedBy = "migration",
                            Name = "Ironing facilities"
                        },
                        new
                        {
                            Id = new Guid("b15b75b2-26c7-4dcc-8d3a-48f2adc115c6"),
                            ChangedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(2773),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(2775),
                            CreatedBy = "migration",
                            Name = "Iron"
                        },
                        new
                        {
                            Id = new Guid("6b9f50b7-7bee-47f5-b036-16839fb98c0c"),
                            ChangedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(2799),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(2801),
                            CreatedBy = "migration",
                            Name = "Heating"
                        },
                        new
                        {
                            Id = new Guid("368c438f-0d80-44a8-95f3-78d8af9e07aa"),
                            ChangedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(2826),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(2829),
                            CreatedBy = "migration",
                            Name = "Coffee machine"
                        },
                        new
                        {
                            Id = new Guid("08ba89d4-19c1-432f-b2bb-e04d4d112d0f"),
                            ChangedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(2852),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(2855),
                            CreatedBy = "migration",
                            Name = "Electric kettle"
                        },
                        new
                        {
                            Id = new Guid("8dd27044-daa4-4c86-b695-f4f422502235"),
                            ChangedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(2878),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(2880),
                            CreatedBy = "migration",
                            Name = "Sofa"
                        },
                        new
                        {
                            Id = new Guid("b506ef7b-54d3-4843-b287-3e4383f5ecbc"),
                            ChangedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(2903),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(2906),
                            CreatedBy = "migration",
                            Name = "Desk"
                        },
                        new
                        {
                            Id = new Guid("a952cb7b-da91-42ee-9a8b-be8f3e26db7b"),
                            ChangedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(2929),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(2931),
                            CreatedBy = "migration",
                            Name = "Satellite channels"
                        },
                        new
                        {
                            Id = new Guid("ff9ff3c6-9e44-4743-83dc-d5e3fc131416"),
                            ChangedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(2955),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(2957),
                            CreatedBy = "migration",
                            Name = "Flat-screen TV"
                        },
                        new
                        {
                            Id = new Guid("7df60302-1e67-44fa-8dc7-8a6445f10620"),
                            ChangedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(2980),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(2983),
                            CreatedBy = "migration",
                            Name = "Balcony"
                        },
                        new
                        {
                            Id = new Guid("42d68492-7738-45f3-be39-5847b5702c3d"),
                            ChangedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(3006),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(3008),
                            CreatedBy = "migration",
                            Name = "Outdoor furniture"
                        },
                        new
                        {
                            Id = new Guid("3cb69c95-244a-4300-818e-92ea90f5c36f"),
                            ChangedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(3130),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(3133),
                            CreatedBy = "migration",
                            Name = "Wake-up service"
                        },
                        new
                        {
                            Id = new Guid("08be5da0-e53b-489f-8cc1-b62a3f145277"),
                            ChangedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(3158),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2020, 11, 10, 16, 48, 28, 448, DateTimeKind.Local).AddTicks(3160),
                            CreatedBy = "migration",
                            Name = "Free Wi-Fi"
                        });
                });

            modelBuilder.Entity("Domain.Identity.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a83b6650-1243-4b25-8867-36b696815a0d"),
                            ConcurrencyStamp = "03a14470-ab3e-4fa2-8827-669bfea45eba",
                            Name = "host",
                            NormalizedName = "Host"
                        },
                        new
                        {
                            Id = new Guid("56dbce5e-cac1-4eb6-8344-b87f2f4e4c81"),
                            ConcurrencyStamp = "bfb33f69-1877-4900-8a92-836380c30d7d",
                            Name = "gust",
                            NormalizedName = "Guest"
                        });
                });

            modelBuilder.Entity("Domain.Identity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3a65c66d-34a4-4ffb-95b1-bb2749403720"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "745b5fa5-1243-4c35-a953-9ad916b1068c",
                            Email = "user@user.com",
                            EmailConfirmed = true,
                            FirstName = "user",
                            LastName = "user",
                            LockoutEnabled = false,
                            LockoutEnd = new DateTimeOffset(new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999), new TimeSpan(0, 0, 0, 0, 0)),
                            NormalizedEmail = "USER@USER.COM",
                            NormalizedUserName = "USER@USER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEONh64d6P7pRC6Ul0RjpW9QNNaRJw1tf9+1xf0zylKP01rZJnxvqfj3r5zxR/AP2jg==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user@user.com"
                        },
                        new
                        {
                            Id = new Guid("c535e396-55cf-42f2-8aef-d21d7438afa6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d146df01-34ad-47f2-9ce7-f3397336d3ce",
                            Email = "host@host.com",
                            EmailConfirmed = true,
                            FirstName = "host",
                            LastName = "host",
                            LockoutEnabled = false,
                            LockoutEnd = new DateTimeOffset(new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999), new TimeSpan(0, 0, 0, 0, 0)),
                            NormalizedEmail = "HOST@HOST.COM",
                            NormalizedUserName = "HOST@HOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBvMh5R6xPf2zTGqDMD6rDxJE/OA5Z+j7GNKNHzMbfsu2mhvA9EP9RMhCoWR/ol8LA==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "host@host.com"
                        });
                });

            modelBuilder.Entity("Domain.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ReservationId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Domain.Policy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int?>("CancellationBefore")
                        .HasColumnType("int");

                    b.Property<int?>("CancellationFee")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("PrepaymentBefore")
                        .HasColumnType("int");

                    b.Property<double>("PriceCoefficient")
                        .HasColumnType("double");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Policies");
                });

            modelBuilder.Entity("Domain.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("Domain.PropertyRules", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<bool?>("AllowParties")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowPets")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("CheckInAge")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("CheckInFrom")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("CheckInTo")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("CheckOutBefore")
                        .HasColumnType("time(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal?>("DamageDeposit")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<bool>("DamageDepositRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PaymentMethodsAccepted")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("PropertyRules");
                });

            modelBuilder.Entity("Domain.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Adults")
                        .HasColumnType("int");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("date");

                    b.Property<int>("Children")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("char(36)");

                    b.Property<int>("ReservationNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Domain.ReservationRooms", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("PolicyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PolicyId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("RoomId");

                    b.ToTable("ReservationRooms");
                });

            modelBuilder.Entity("Domain.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("ReservationId")
                        .IsUnique();

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Domain.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AdultsOccupancy")
                        .HasColumnType("int");

                    b.Property<bool>("AllowSmoking")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Bed")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ChildOccupancy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Domain.RoomFacilities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("FacilityId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomFacilities");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("c535e396-55cf-42f2-8aef-d21d7438afa6"),
                            RoleId = new Guid("a83b6650-1243-4b25-8867-36b696815a0d")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.Availability", b =>
                {
                    b.HasOne("Domain.Room", "Room")
                        .WithMany("RoomAvailabilities")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.AvailabilityPolicies", b =>
                {
                    b.HasOne("Domain.Availability", "Availability")
                        .WithMany("AvailabilityPolicies")
                        .HasForeignKey("AvailabilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Policy", "Policy")
                        .WithMany()
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Extra", b =>
                {
                    b.HasOne("Domain.Property", null)
                        .WithMany("Extras")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Invoice", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Property", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.PropertyRules", b =>
                {
                    b.HasOne("Domain.Property", "Property")
                        .WithOne("PropertyRules")
                        .HasForeignKey("Domain.PropertyRules", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Reservation", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.ReservationRooms", b =>
                {
                    b.HasOne("Domain.Policy", null)
                        .WithMany("PolicyAvailabilities")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Reservation", "Reservation")
                        .WithMany("ReservationRooms")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Review", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Property", "Property")
                        .WithMany("Reviews")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Reservation", "Reservation")
                        .WithOne("Review")
                        .HasForeignKey("Domain.Review", "ReservationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Room", b =>
                {
                    b.HasOne("Domain.Property", "Property")
                        .WithMany("PropertyRooms")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.RoomFacilities", b =>
                {
                    b.HasOne("Domain.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Room", "Room")
                        .WithMany("RoomFacilities")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
