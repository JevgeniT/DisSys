// <auto-generated />
using System;
using DAL.App.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.App.EF.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Availability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("From")
                        .HasColumnType("date");

                    b.Property<decimal>("PricePerNightForAdult")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("PricePerNightForChild")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("PricePerPerson")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoomsAvailable")
                        .HasColumnType("int");

                    b.Property<DateTime>("To")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Availabilities");
                });

            modelBuilder.Entity("Domain.Extra", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("Extras");
                });

            modelBuilder.Entity("Domain.Facility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Facilities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("16ea6d15-6169-46c2-8ccf-1b4700c3dce0"),
                            ChangedAt = new DateTime(2021, 5, 16, 13, 25, 25, 276, DateTimeKind.Local).AddTicks(6409),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2021, 5, 16, 13, 25, 25, 280, DateTimeKind.Local).AddTicks(2229),
                            CreatedBy = "migration",
                            Name = "Elevator"
                        },
                        new
                        {
                            Id = new Guid("b9fdc553-5492-48d2-a3d4-7fb71c3dfcb6"),
                            ChangedAt = new DateTime(2021, 5, 16, 13, 25, 25, 280, DateTimeKind.Local).AddTicks(4498),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2021, 5, 16, 13, 25, 25, 280, DateTimeKind.Local).AddTicks(4511),
                            CreatedBy = "migration",
                            Name = "Linens"
                        },
                        new
                        {
                            Id = new Guid("322ef2ef-6c4e-47d8-b220-c163f55a55a7"),
                            ChangedAt = new DateTime(2021, 5, 16, 13, 25, 25, 280, DateTimeKind.Local).AddTicks(4549),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2021, 5, 16, 13, 25, 25, 280, DateTimeKind.Local).AddTicks(4551),
                            CreatedBy = "migration",
                            Name = "Wardrobe"
                        },
                        new
                        {
                            Id = new Guid("a12e77c8-6963-4aa5-81a3-1a2f2ca2e105"),
                            ChangedAt = new DateTime(2021, 5, 16, 13, 25, 25, 280, DateTimeKind.Local).AddTicks(4581),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2021, 5, 16, 13, 25, 25, 280, DateTimeKind.Local).AddTicks(4583),
                            CreatedBy = "migration",
                            Name = "Minibar"
                        },
                        new
                        {
                            Id = new Guid("0f5fdadb-1986-4bb0-98b8-56190dfab910"),
                            ChangedAt = new DateTime(2021, 5, 16, 13, 25, 25, 280, DateTimeKind.Local).AddTicks(4614),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2021, 5, 16, 13, 25, 25, 280, DateTimeKind.Local).AddTicks(4615),
                            CreatedBy = "migration",
                            Name = "Air conditioning"
                        },
                        new
                        {
                            Id = new Guid("ccbecba8-97f0-4236-b064-20e6c4964dd3"),
                            ChangedAt = new DateTime(2021, 5, 16, 13, 25, 25, 280, DateTimeKind.Local).AddTicks(4649),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2021, 5, 16, 13, 25, 25, 280, DateTimeKind.Local).AddTicks(4651),
                            CreatedBy = "migration",
                            Name = "Safe"
                        },
                        new
                        {
                            Id = new Guid("27ad930e-2ada-4ba5-812a-f21d869f4e2a"),
                            ChangedAt = new DateTime(2021, 5, 16, 13, 25, 25, 280, DateTimeKind.Local).AddTicks(4680),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2021, 5, 16, 13, 25, 25, 280, DateTimeKind.Local).AddTicks(4682),
                            CreatedBy = "migration",
                            Name = "Iron"
                        },
                        new
                        {
                            Id = new Guid("c68c0206-cc76-4aa1-8316-a7a02e7bd643"),
                            ChangedAt = new DateTime(2021, 5, 16, 13, 25, 25, 280, DateTimeKind.Local).AddTicks(4711),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2021, 5, 16, 13, 25, 25, 280, DateTimeKind.Local).AddTicks(4713),
                            CreatedBy = "migration",
                            Name = "Heating"
                        },
                        new
                        {
                            Id = new Guid("f1f1e170-ff0e-4fd3-9032-678430391996"),
                            ChangedAt = new DateTime(2021, 5, 16, 13, 25, 25, 280, DateTimeKind.Local).AddTicks(4785),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2021, 5, 16, 13, 25, 25, 280, DateTimeKind.Local).AddTicks(4787),
                            CreatedBy = "migration",
                            Name = "Coffee machine"
                        },
                        new
                        {
                            Id = new Guid("14582f92-1861-4250-a9ec-c970513c4c05"),
                            ChangedAt = new DateTime(2021, 5, 16, 13, 25, 25, 280, DateTimeKind.Local).AddTicks(4818),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2021, 5, 16, 13, 25, 25, 280, DateTimeKind.Local).AddTicks(4820),
                            CreatedBy = "migration",
                            Name = "Kettle"
                        },
                        new
                        {
                            Id = new Guid("ac1d8dd3-49fa-4194-8390-dbd64de7b8be"),
                            ChangedAt = new DateTime(2021, 5, 16, 13, 25, 25, 280, DateTimeKind.Local).AddTicks(4850),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2021, 5, 16, 13, 25, 25, 280, DateTimeKind.Local).AddTicks(4852),
                            CreatedBy = "migration",
                            Name = "Sofa"
                        },
                        new
                        {
                            Id = new Guid("b9c1c84f-92df-4cbd-9d77-8991a9211e4a"),
                            ChangedAt = new DateTime(2021, 5, 16, 13, 25, 25, 280, DateTimeKind.Local).AddTicks(4881),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2021, 5, 16, 13, 25, 25, 280, DateTimeKind.Local).AddTicks(4883),
                            CreatedBy = "migration",
                            Name = "Desk"
                        },
                        new
                        {
                            Id = new Guid("57adc1d2-ada2-41c9-bf4e-fd2b54c70cd0"),
                            ChangedAt = new DateTime(2021, 5, 16, 13, 25, 25, 280, DateTimeKind.Local).AddTicks(4912),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2021, 5, 16, 13, 25, 25, 280, DateTimeKind.Local).AddTicks(4914),
                            CreatedBy = "migration",
                            Name = "Satellite channels"
                        },
                        new
                        {
                            Id = new Guid("df0abf51-f48c-4abf-b85c-102bc2d09fbe"),
                            ChangedAt = new DateTime(2021, 5, 16, 13, 25, 25, 280, DateTimeKind.Local).AddTicks(5065),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2021, 5, 16, 13, 25, 25, 280, DateTimeKind.Local).AddTicks(5069),
                            CreatedBy = "migration",
                            Name = "Flat-screen TV"
                        },
                        new
                        {
                            Id = new Guid("388a0059-6fdc-47cd-b374-d5e1bd7fe5c2"),
                            ChangedAt = new DateTime(2021, 5, 16, 13, 25, 25, 280, DateTimeKind.Local).AddTicks(5102),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2021, 5, 16, 13, 25, 25, 280, DateTimeKind.Local).AddTicks(5104),
                            CreatedBy = "migration",
                            Name = "Balcony"
                        },
                        new
                        {
                            Id = new Guid("7fa3b04d-892c-48c5-ad61-a9ab7581ca39"),
                            ChangedAt = new DateTime(2021, 5, 16, 13, 25, 25, 280, DateTimeKind.Local).AddTicks(5133),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2021, 5, 16, 13, 25, 25, 280, DateTimeKind.Local).AddTicks(5135),
                            CreatedBy = "migration",
                            Name = "Outdoor furniture"
                        },
                        new
                        {
                            Id = new Guid("9d91b039-fcd9-4872-96b5-1659f9e95798"),
                            ChangedAt = new DateTime(2021, 5, 16, 13, 25, 25, 280, DateTimeKind.Local).AddTicks(5165),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2021, 5, 16, 13, 25, 25, 280, DateTimeKind.Local).AddTicks(5167),
                            CreatedBy = "migration",
                            Name = "Wake-up service"
                        },
                        new
                        {
                            Id = new Guid("a3855030-dfd7-47b5-9c72-bfd402e55339"),
                            ChangedAt = new DateTime(2021, 5, 16, 13, 25, 25, 280, DateTimeKind.Local).AddTicks(5198),
                            ChangedBy = "migration",
                            CreatedAt = new DateTime(2021, 5, 16, 13, 25, 25, 280, DateTimeKind.Local).AddTicks(5200),
                            CreatedBy = "migration",
                            Name = "Free Wi-Fi"
                        });
                });

            modelBuilder.Entity("Domain.Identity.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a039270-ea64-4c79-a5a3-600512125f84"),
                            ConcurrencyStamp = "2c03523f-3df2-4d48-aede-a952827d2891",
                            Name = "host",
                            NormalizedName = "Host"
                        },
                        new
                        {
                            Id = new Guid("3f4da5b7-c4bc-4ceb-86b0-df5552a2f348"),
                            ConcurrencyStamp = "ed686ca1-5ff9-4228-8079-5b446fc87a3d",
                            Name = "gust",
                            NormalizedName = "Guest"
                        });
                });

            modelBuilder.Entity("Domain.Identity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("46296117-c5dd-4ff2-9c1e-b37f21409dba"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "05946e42-9153-4f1c-9662-2eec26ee89c2",
                            Email = "user@user.com",
                            EmailConfirmed = true,
                            FirstName = "user",
                            LastName = "user",
                            LockoutEnabled = false,
                            LockoutEnd = new DateTimeOffset(new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999), new TimeSpan(0, 0, 0, 0, 0)),
                            NormalizedEmail = "USER@USER.COM",
                            NormalizedUserName = "USER@USER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELJH4SxTmADSNMq1T/wnrPAFrhqFY9HgXXWbXkVroLI2gHXuQBVHHAB/KKu74Dj3Iw==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user@user.com"
                        },
                        new
                        {
                            Id = new Guid("7a3694c4-5cdc-4ac8-899a-ce35edb3a75a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "54809940-fc23-44b9-93d9-c1fc8cbc1d13",
                            Email = "host@host.com",
                            EmailConfirmed = true,
                            FirstName = "host",
                            LastName = "host",
                            LockoutEnabled = false,
                            LockoutEnd = new DateTimeOffset(new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999), new TimeSpan(0, 0, 0, 0, 0)),
                            NormalizedEmail = "HOST@HOST.COM",
                            NormalizedUserName = "HOST@HOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHketBIzGh1h//l57oHPfRQs6RLK1GsMP4tpsQskIYA+A/A6PkZSy8PVtrqSy9Pong==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "host@host.com"
                        });
                });

            modelBuilder.Entity("Domain.Policy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CancellationBefore")
                        .HasColumnType("int");

                    b.Property<int?>("CancellationFee")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PrepaymentBefore")
                        .HasColumnType("int");

                    b.Property<double>("PriceCoefficient")
                        .HasColumnType("float");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Policies");
                });

            modelBuilder.Entity("Domain.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("Domain.PropertyRules", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("AllowParties")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowPets")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CheckInAge")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("CheckInFrom")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("CheckInTo")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("CheckOutBefore")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DamageDeposit")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("DamageDepositRequired")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentMethodsAccepted")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PropertyRules");
                });

            modelBuilder.Entity("Domain.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Adults")
                        .HasColumnType("int");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ArrivalTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("date");

                    b.Property<int>("Children")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReservationNumber")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Domain.ReservationExtras", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ExtraId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExtraId");

                    b.HasIndex("ReservationId");

                    b.ToTable("ReservationExtras");
                });

            modelBuilder.Entity("Domain.ReservationRooms", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BedType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuestFirstLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PolicyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("RoomTotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId");

                    b.HasIndex("RoomId");

                    b.ToTable("ReservationRooms");
                });

            modelBuilder.Entity("Domain.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("ReservationId")
                        .IsUnique();

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Domain.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AdultsOccupancy")
                        .HasColumnType("int");

                    b.Property<bool>("AllowSmoking")
                        .HasColumnType("bit");

                    b.Property<string>("BedTypes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ChildOccupancy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Domain.RoomFacilities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomFacilities");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("7a3694c4-5cdc-4ac8-899a-ce35edb3a75a"),
                            RoleId = new Guid("8a039270-ea64-4c79-a5a3-600512125f84")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.Availability", b =>
                {
                    b.HasOne("Domain.Room", "Room")
                        .WithMany("RoomAvailabilities")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Domain.Extra", b =>
                {
                    b.HasOne("Domain.Property", null)
                        .WithMany("Extras")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Property", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Domain.PropertyRules", b =>
                {
                    b.HasOne("Domain.Property", "Property")
                        .WithOne("PropertyRules")
                        .HasForeignKey("Domain.PropertyRules", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Domain.Reservation", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Domain.ReservationExtras", b =>
                {
                    b.HasOne("Domain.Extra", "Extra")
                        .WithMany()
                        .HasForeignKey("ExtraId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Reservation", "Reservation")
                        .WithMany("ReservationExtras")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Extra");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("Domain.ReservationRooms", b =>
                {
                    b.HasOne("Domain.Reservation", "Reservation")
                        .WithMany("ReservationRooms")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Domain.Review", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Property", "Property")
                        .WithMany("Reviews")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Reservation", "Reservation")
                        .WithOne("Review")
                        .HasForeignKey("Domain.Review", "ReservationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Property");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("Domain.Room", b =>
                {
                    b.HasOne("Domain.Property", "Property")
                        .WithMany("PropertyRooms")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Domain.RoomFacilities", b =>
                {
                    b.HasOne("Domain.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Room", "Room")
                        .WithMany("RoomFacilities")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Property", b =>
                {
                    b.Navigation("Extras");

                    b.Navigation("PropertyRooms");

                    b.Navigation("PropertyRules");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Domain.Reservation", b =>
                {
                    b.Navigation("ReservationExtras");

                    b.Navigation("ReservationRooms");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("Domain.Room", b =>
                {
                    b.Navigation("RoomAvailabilities");

                    b.Navigation("RoomFacilities");
                });
#pragma warning restore 612, 618
        }
    }
}
