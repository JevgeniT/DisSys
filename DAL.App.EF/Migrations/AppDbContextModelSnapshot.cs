// <auto-generated />
using System;
using DAL.App.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.App.EF.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Availability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("From")
                        .HasColumnType("date");

                    b.Property<decimal>("PricePerNightForAdult")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("PricePerNightForChild")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<bool>("PricePerPerson")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("char(36)");

                    b.Property<int>("RoomsAvailable")
                        .HasColumnType("int");

                    b.Property<DateTime>("To")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Availabilities");
                });

            modelBuilder.Entity("Domain.AvailabilityPolicies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("AvailabilityId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("PolicyId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilityId");

                    b.HasIndex("PolicyId");

                    b.ToTable("AvailabilityPolicies");
                });

            modelBuilder.Entity("Domain.Extra", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("Extras");
                });

            modelBuilder.Entity("Domain.Facility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Facilities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("071286f8-07e5-472f-9a7e-d539c76e9719"),
                            ChangedAt = new DateTime(2020, 11, 8, 15, 58, 24, 182, DateTimeKind.Local).AddTicks(2559),
                            CreatedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(4554),
                            Name = "Upper floors accessible by elevator"
                        },
                        new
                        {
                            Id = new Guid("86d2707c-8326-4074-b0ef-eb5bc896ce3c"),
                            ChangedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(7505),
                            CreatedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(7519),
                            Name = "Linens"
                        },
                        new
                        {
                            Id = new Guid("64892513-2b9c-4ab3-94a7-8b5b24fdb7c1"),
                            ChangedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(7569),
                            CreatedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(7572),
                            Name = "Wardrobe or closet"
                        },
                        new
                        {
                            Id = new Guid("7d7b121e-b891-4610-ae94-7ce800a9a1c7"),
                            ChangedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(7596),
                            CreatedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(7598),
                            Name = "Minibar"
                        },
                        new
                        {
                            Id = new Guid("2899ec96-65a0-405b-8c11-3aab950f6559"),
                            ChangedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(7622),
                            CreatedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(7624),
                            Name = "Air conditioning"
                        },
                        new
                        {
                            Id = new Guid("a0afe391-b345-4877-924e-89e552bd88e5"),
                            ChangedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(7653),
                            CreatedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(7656),
                            Name = "Safe"
                        },
                        new
                        {
                            Id = new Guid("7adf3ff1-e23b-4a72-95bc-950a1ea09e38"),
                            ChangedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(7679),
                            CreatedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(7682),
                            Name = "Ironing facilities"
                        },
                        new
                        {
                            Id = new Guid("84a5e0d5-0340-40a6-97f5-4fa003a09598"),
                            ChangedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(7705),
                            CreatedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(7707),
                            Name = "Iron"
                        },
                        new
                        {
                            Id = new Guid("2843c938-244e-49b7-afe3-2341cb1705ac"),
                            ChangedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(7731),
                            CreatedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(7734),
                            Name = "Heating"
                        },
                        new
                        {
                            Id = new Guid("c69806b2-0374-4219-a83b-e5a0527ead6b"),
                            ChangedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(7949),
                            CreatedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(7953),
                            Name = "Coffee machine"
                        },
                        new
                        {
                            Id = new Guid("fe008d1d-f262-4987-93c3-7ed7e186661a"),
                            ChangedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(7977),
                            CreatedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(7979),
                            Name = "Electric kettle"
                        },
                        new
                        {
                            Id = new Guid("b8b407c4-ab97-49e6-92f9-93d81dc556df"),
                            ChangedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(8003),
                            CreatedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(8005),
                            Name = "Sofa"
                        },
                        new
                        {
                            Id = new Guid("11e773a0-aaeb-4f9b-a3a6-8989667a9d24"),
                            ChangedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(8029),
                            CreatedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(8031),
                            Name = "Desk"
                        },
                        new
                        {
                            Id = new Guid("9b4730d4-d729-4d38-8452-cc204d485b7e"),
                            ChangedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(8055),
                            CreatedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(8057),
                            Name = "Satellite channels"
                        },
                        new
                        {
                            Id = new Guid("0d30e518-466f-411b-9628-fbea20c784ea"),
                            ChangedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(8081),
                            CreatedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(8083),
                            Name = "Flat-screen TV"
                        },
                        new
                        {
                            Id = new Guid("8c4f71b7-5855-4e68-a224-4f8571571144"),
                            ChangedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(8107),
                            CreatedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(8109),
                            Name = "Balcony"
                        },
                        new
                        {
                            Id = new Guid("7139846f-868e-431e-873f-071880b53bbf"),
                            ChangedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(8133),
                            CreatedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(8135),
                            Name = "Outdoor furniture"
                        },
                        new
                        {
                            Id = new Guid("dc112a44-78b5-41e0-9878-8fc24bd322f9"),
                            ChangedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(8160),
                            CreatedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(8163),
                            Name = "Wake-up service"
                        },
                        new
                        {
                            Id = new Guid("7e5f8627-0986-4ccb-8bae-43a4fc6873aa"),
                            ChangedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(8187),
                            CreatedAt = new DateTime(2020, 11, 8, 15, 58, 24, 187, DateTimeKind.Local).AddTicks(8189),
                            Name = "Free Wi-Fi"
                        });
                });

            modelBuilder.Entity("Domain.Identity.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c46a9222-34d3-4ad5-9373-03e9d071ed8d"),
                            ConcurrencyStamp = "0fd2ea47-7857-4e99-adee-83f2e577a4a3",
                            Name = "host",
                            NormalizedName = "Host"
                        },
                        new
                        {
                            Id = new Guid("91cdfc22-d914-4f1a-98fb-27023f2184b2"),
                            ConcurrencyStamp = "e9f38949-5bda-49c5-8db1-03c78cd3d787",
                            Name = "gust",
                            NormalizedName = "Guest"
                        });
                });

            modelBuilder.Entity("Domain.Identity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9b7d1009-52c6-4a07-b96b-bfe524b85028"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "efae1003-f30c-4735-8944-b3406d716ece",
                            Email = "user@user.com",
                            EmailConfirmed = true,
                            FirstName = "user",
                            LastName = "user",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@USER.COM",
                            NormalizedUserName = "USER@USER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKGItRn8pLLkfmkMKGD3NXeNH9R4gBTBvZVFzTBn6ojTa1Wth3GDTUvgzNfhoWTBgw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user@user.com"
                        },
                        new
                        {
                            Id = new Guid("9e99dcd4-8d87-4574-9439-62043d8b7411"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "831658d0-61ff-4cb5-9b31-89e90204c920",
                            Email = "host@host.com",
                            EmailConfirmed = true,
                            FirstName = "host",
                            LastName = "host",
                            LockoutEnabled = false,
                            NormalizedEmail = "HOST@HOST.COM",
                            NormalizedUserName = "HOST@HOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGP8Esn2oJEbh8kxT5dzL4WodZqEKHkClP2TlnsgjZFUWnBP7y5H+YhVObkSJPLWLQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "host@host.com"
                        });
                });

            modelBuilder.Entity("Domain.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ReservationId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Domain.Policy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int?>("CancellationBefore")
                        .HasColumnType("int");

                    b.Property<int?>("CancellationFee")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("PrepaymentBefore")
                        .HasColumnType("int");

                    b.Property<double>("PriceCoefficient")
                        .HasColumnType("double");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Policies");
                });

            modelBuilder.Entity("Domain.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("Domain.PropertyRules", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<bool?>("AllowParties")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowPets")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("CheckInAge")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("CheckInFrom")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("CheckInTo")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("CheckOutBefore")
                        .HasColumnType("time(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal?>("DamageDeposit")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<bool>("DamageDepositRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PaymentMethodsAccepted")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("PropertyRules");
                });

            modelBuilder.Entity("Domain.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Adults")
                        .HasColumnType("int");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("date");

                    b.Property<int>("Children")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("char(36)");

                    b.Property<int>("ReservationNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Domain.ReservationRooms", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("PolicyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PolicyId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("RoomId");

                    b.ToTable("ReservationRooms");
                });

            modelBuilder.Entity("Domain.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("ReservationId")
                        .IsUnique();

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Domain.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AdultsOccupancy")
                        .HasColumnType("int");

                    b.Property<bool>("AllowSmoking")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Bed")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ChildOccupancy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Domain.RoomFacilities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("FacilityId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomFacilities");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("9e99dcd4-8d87-4574-9439-62043d8b7411"),
                            RoleId = new Guid("c46a9222-34d3-4ad5-9373-03e9d071ed8d")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.Availability", b =>
                {
                    b.HasOne("Domain.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.AvailabilityPolicies", b =>
                {
                    b.HasOne("Domain.Availability", "Availability")
                        .WithMany("AvailabilityPolicies")
                        .HasForeignKey("AvailabilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Policy", "Policy")
                        .WithMany()
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Extra", b =>
                {
                    b.HasOne("Domain.Property", null)
                        .WithMany("Extras")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Invoice", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Property", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.PropertyRules", b =>
                {
                    b.HasOne("Domain.Property", "Property")
                        .WithOne("PropertyRules")
                        .HasForeignKey("Domain.PropertyRules", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Reservation", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.ReservationRooms", b =>
                {
                    b.HasOne("Domain.Policy", null)
                        .WithMany("PolicyAvailabilities")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Reservation", "Reservation")
                        .WithMany("ReservationRooms")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Review", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Property", "Property")
                        .WithMany("Reviews")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Reservation", "Reservation")
                        .WithOne("Review")
                        .HasForeignKey("Domain.Review", "ReservationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Room", b =>
                {
                    b.HasOne("Domain.Property", "Property")
                        .WithMany("PropertyRooms")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.RoomFacilities", b =>
                {
                    b.HasOne("Domain.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Room", "Room")
                        .WithMany("RoomFacilities")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
